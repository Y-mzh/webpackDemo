// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/validator.d.ts
declare module 'validator' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, SurveyError } from 'base';
export class ValidatorResult {
    value: any;
    error: SurveyError;
    constructor(value: any, error?: SurveyError);
}
export class SurveyValidator extends Base {
    text: string;
    constructor();
    protected getErrorText(name: string): string;
    protected getDefaultErrorText(name: string): string;
    validate(value: any, name?: string): ValidatorResult;
}
export interface IValidatorOwner {
    validators: Array<SurveyValidator>;
    value: any;
    getValidatorTitle(): string;
}
export class ValidatorRunner {
    run(owner: IValidatorOwner): SurveyError;
}
export class NumericValidator extends SurveyValidator {
    minValue: number;
    maxValue: number;
    constructor(minValue?: number, maxValue?: number);
    getType(): string;
    validate(value: any, name?: string): ValidatorResult;
    protected getDefaultErrorText(name: string): any;
    private isNumber(value);
}
export class TextValidator extends SurveyValidator {
    minLength: number;
    constructor(minLength?: number);
    getType(): string;
    validate(value: any, name?: string): ValidatorResult;
    protected getDefaultErrorText(name: string): any;
}
export class AnswerCountValidator extends SurveyValidator {
    minCount: number;
    maxCount: number;
    constructor(minCount?: number, maxCount?: number);
    getType(): string;
    validate(value: any, name?: string): ValidatorResult;
    protected getDefaultErrorText(name: string): string;
}
export class RegexValidator extends SurveyValidator {
    regex: string;
    constructor(regex?: string);
    getType(): string;
    validate(value: any, name?: string): ValidatorResult;
}
export class EmailValidator extends SurveyValidator {
    private re;
    constructor();
    getType(): string;
    validate(value: any, name?: string): ValidatorResult;
    protected getDefaultErrorText(name: string): any;
}
}
declare module 'validator' {
export * from 'validator';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/base.d.ts
declare module 'base' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export interface HashTable<T> {
    [key: string]: T;
}
export interface ISurveyData {
    getValue(name: string): any;
    setValue(name: string, newValue: any): any;
    getComment(name: string): string;
    setComment(name: string, newValue: string): any;
}
export interface ISurvey extends ISurveyData {
    currentPage: IPage;
    pageVisibilityChanged(page: IPage, newValue: boolean): any;
    questionVisibilityChanged(question: IQuestion, newValue: boolean): any;
    questionAdded(question: IQuestion, index: number): any;
    questionRemoved(question: IQuestion): any;
    validateQuestion(name: string): SurveyError;
    processHtml(html: string): string;
    processText(text: string): string;
    isDesignMode: boolean;
    requiredText: string;
    questionStartIndex: string;
    questionTitleTemplate: string;
    storeOthersAsComment: boolean;
    uploadFile(name: string, file: File, storeDataAsText: boolean, uploadingCallback: (status: string) => any): boolean;
}
export interface IConditionRunner {
    runCondition(values: HashTable<any>): any;
}
export interface IQuestion extends IConditionRunner {
    name: string;
    visible: boolean;
    hasTitle: boolean;
    setVisibleIndex(value: number): any;
    onSurveyValueChanged(newValue: any): any;
    onSurveyLoad(): any;
    supportGoNextPageAutomatic(): boolean;
}
export interface IPage extends IConditionRunner {
    visible: boolean;
}
export class ItemValue {
    static Separator: string;
    static setData(items: Array<ItemValue>, values: Array<any>): void;
    static getData(items: Array<ItemValue>): any;
    private itemValue;
    private itemText;
    constructor(value: any, text?: string);
    getType(): string;
    value: any;
    hasText: boolean;
    text: string;
}
export class Base {
    getType(): string;
}
export class SurveyError {
    getText(): string;
}
export class Event<T extends Function, Options> {
    private callbacks;
    isEmpty: boolean;
    fire(sender: any, options: Options): void;
    add(func: T): void;
    remove(func: T): void;
}
}
declare module 'base' {
export * from 'base';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/choicesRestfull.d.ts
declare module 'choicesRestfull' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, ItemValue, SurveyError } from 'base';
export class ChoicesRestfull extends Base {
    url: string;
    path: string;
    valueName: string;
    titleName: string;
    getResultCallback: (items: Array<ItemValue>) => void;
    error: SurveyError;
    constructor();
    run(): void;
    getType(): string;
    isEmpty: boolean;
    setData(json: any): void;
    clear(): void;
    protected onLoad(result: any): void;
    private onError(status, response);
    private getResultAfterPath(result);
    private getPathes();
    private getValue(item);
    private getTitle(item);
}
}
declare module 'choicesRestfull' {
export * from 'choicesRestfull';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/conditions.d.ts
declare module 'conditions' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { HashTable } from 'base';
export class Condition {
    static operatorsValue: HashTable<Function>;
    static operators: HashTable<Function>;
    private opValue;
    left: any;
    right: any;
    operator: string;
    perform(left?: any, right?: any): boolean;
    private getPureValue(val);
}
export class ConditionNode {
    private connectiveValue;
    children: Array<any>;
    constructor();
    connective: string;
    isEmpty: boolean;
    clear(): void;
}
export class ConditionRunner {
    private expressionValue;
    private root;
    private values;
    constructor(expression: string);
    expression: string;
    run(values: HashTable<any>): boolean;
    private runNode(node);
    private runNodeCondition(value);
    private runCondition(condition);
    private getValueName(nodeValue);
}
}
declare module 'conditions' {
export * from 'conditions';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/conditionsParser.d.ts
declare module 'conditionsParser' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { ConditionNode } from 'conditions';
export class ConditionsParser {
    private text;
    private root;
    private expressionNodes;
    private node;
    private at;
    private length;
    parse(text: string, root: ConditionNode): boolean;
    toString(root: ConditionNode): string;
    private toStringCore(value);
    private nodeToString(node);
    private conditionToString(condition);
    private operationToString(op);
    private isNumeric(value);
    private parseText();
    private readConditions();
    private readCondition();
    private readExpression();
    private ch;
    private skip();
    private isSpace(c);
    private isQuotes(c);
    private isOperatorChar(c);
    private isBrackets(c);
    private readString();
    private isNoRightOperation(op);
    private readOperator();
    private readConnective();
    private pushExpression();
    private popExpression();
    private addCondition(c);
    private addConnective(con);
}
}
declare module 'conditionsParser' {
export * from 'conditionsParser';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/error.d.ts
declare module 'error' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { SurveyError } from 'base';
export class AnswerRequiredError extends SurveyError {
    constructor();
    getText(): string;
}
export class RequreNumericError extends SurveyError {
    constructor();
    getText(): string;
}
export class ExceedSizeError extends SurveyError {
    private maxSize;
    constructor(maxSize: number);
    getText(): string;
    private getTextSize();
}
export class CustomError extends SurveyError {
    private text;
    constructor(text: string);
    getText(): string;
}
}
declare module 'error' {
export * from 'error';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/jsonobject.d.ts
declare module 'jsonobject' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export class JsonObjectProperty {
    name: string;
    private typeValue;
    private choicesValue;
    private choicesfunc;
    className: string;
    classNamePart: string;
    baseClassName: string;
    defaultValue: any;
    onGetValue: (obj: any) => any;
    onSetValue: (obj: any, value: any, jsonConv: JsonObject) => any;
    constructor(name: string);
    type: string;
    hasToUseGetValue: (obj: any) => any;
    isDefaultValue(value: any): boolean;
    getValue(obj: any): any;
    hasToUseSetValue: (obj: any, value: any, jsonConv: JsonObject) => any;
    setValue(obj: any, value: any, jsonConv: JsonObject): void;
    getObjType(objType: string): string;
    getClassName(className: string): string;
    choices: Array<any>;
    setChoices(value: Array<any>, valueFunc: () => Array<any>): void;
}
export class JsonMetadataClass {
    name: string;
    creator: () => any;
    parentName: string;
    static requiredSymbol: string;
    static typeSymbol: string;
    properties: Array<JsonObjectProperty>;
    requiredProperties: Array<string>;
    constructor(name: string, properties: Array<any>, creator?: () => any, parentName?: string);
    find(name: string): JsonObjectProperty;
    private createProperty(propInfo);
    private getPropertyName(propertyName);
    private makePropertyRequired(propertyName);
}
export class JsonMetadata {
    private classes;
    private childrenClasses;
    private classProperties;
    private classRequiredProperties;
    addClass(name: string, properties: Array<any>, creator?: () => any, parentName?: string): JsonMetadataClass;
    overrideClassCreatore(name: string, creator: () => any): void;
    getProperties(name: string): Array<JsonObjectProperty>;
    createClass(name: string): any;
    getChildrenClasses(name: string, canBeCreated?: boolean): Array<JsonMetadataClass>;
    getRequiredProperties(name: string): Array<string>;
    private fillChildrenClasses(name, canBeCreated, result);
    private findClass(name);
    private fillProperties(name, list);
    private addProperty(property, list, endIndex);
    private fillRequiredProperties(name, list);
}
export class JsonError {
    type: string;
    message: string;
    description: string;
    at: Number;
    constructor(type: string, message: string);
    getFullDescription(): string;
}
export class JsonUnknownPropertyError extends JsonError {
    propertyName: string;
    className: string;
    constructor(propertyName: string, className: string);
}
export class JsonMissingTypeErrorBase extends JsonError {
    baseClassName: string;
    type: string;
    message: string;
    constructor(baseClassName: string, type: string, message: string);
}
export class JsonMissingTypeError extends JsonMissingTypeErrorBase {
    propertyName: string;
    baseClassName: string;
    constructor(propertyName: string, baseClassName: string);
}
export class JsonIncorrectTypeError extends JsonMissingTypeErrorBase {
    propertyName: string;
    baseClassName: string;
    constructor(propertyName: string, baseClassName: string);
}
export class JsonRequiredPropertyError extends JsonError {
    propertyName: string;
    className: string;
    constructor(propertyName: string, className: string);
}
export class JsonObject {
    private static typePropertyName;
    private static positionPropertyName;
    private static metaDataValue;
    static metaData: JsonMetadata;
    errors: JsonError[];
    toJsonObject(obj: any): any;
    toObject(jsonObj: any, obj: any): void;
    protected toJsonObjectCore(obj: any, property: JsonObjectProperty): any;
    protected valueToJson(obj: any, result: any, property: JsonObjectProperty): void;
    protected valueToObj(value: any, obj: any, key: any, property: JsonObjectProperty): void;
    private isValueArray(value);
    private createNewObj(value, property);
    private checkNewObjectOnErrors(newObj, value, property, className);
    private addNewError(error, jsonObj);
    private valueToArray(value, obj, key, property);
    private findProperty(properties, key);
}
}
declare module 'jsonobject' {
export * from 'jsonobject';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_matrixdropdownbase.d.ts
declare module 'question_matrixdropdownbase' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Question } from 'question';
import { Base, ISurveyData } from 'base';
import { QuestionDropdownModel } from 'question_dropdown';
import { QuestionCheckboxModel } from 'question_checkbox';
import { QuestionRadiogroupModel } from 'question_radiogroup';
import { QuestionTextModel } from 'question_text';
import { QuestionCommentModel } from 'question_comment';
export interface IMatrixDropdownData {
    onRowChanged(cell: MatrixDropdownRowModelBase, newRowValue: any): any;
    columns: Array<MatrixDropdownColumn>;
    createQuestion(row: MatrixDropdownRowModelBase, column: MatrixDropdownColumn): Question;
}
export class MatrixDropdownColumn extends Base {
    name: string;
    private choicesValue;
    private titleValue;
    optionsCaption: string;
    isRequired: boolean;
    hasOther: boolean;
    minWidth: string;
    cellType: string;
    private colCountValue;
    constructor(name: string, title?: string);
    getType(): string;
    title: string;
    choices: Array<any>;
    colCount: number;
}
export class MatrixDropdownCell {
    column: MatrixDropdownColumn;
    row: MatrixDropdownRowModelBase;
    private questionValue;
    constructor(column: MatrixDropdownColumn, row: MatrixDropdownRowModelBase, data: IMatrixDropdownData);
    question: Question;
    value: any;
}
export class MatrixDropdownRowModelBase implements ISurveyData {
    protected data: IMatrixDropdownData;
    private rowValues;
    private rowComments;
    private isSettingValue;
    cells: Array<MatrixDropdownCell>;
    constructor(data: IMatrixDropdownData, value: any);
    rowName: any;
    value: any;
    getValue(name: string): any;
    setValue(name: string, newValue: any): void;
    getComment(name: string): string;
    setComment(name: string, newValue: string): void;
    isEmpty: boolean;
    private buildCells();
    protected createCell(column: MatrixDropdownColumn): MatrixDropdownCell;
}
export class QuestionMatrixDropdownModelBase extends Question implements IMatrixDropdownData {
    name: string;
    private columnsValue;
    private choicesValue;
    private optionsCaptionValue;
    private isRowChanging;
    protected generatedVisibleRows: Array<MatrixDropdownRowModelBase>;
    private cellTypeValue;
    private columnColCountValue;
    columnMinWidth: string;
    horizontalScroll: boolean;
    columnsChangedCallback: () => void;
    updateCellsCallbak: () => void;
    constructor(name: string);
    getType(): string;
    columns: Array<MatrixDropdownColumn>;
    cellType: string;
    columnColCount: number;
    getColumnTitle(column: MatrixDropdownColumn): string;
    getColumnWidth(column: MatrixDropdownColumn): string;
    choices: Array<any>;
    optionsCaption: string;
    addColumn(name: string, title?: string): MatrixDropdownColumn;
    visibleRows: Array<MatrixDropdownRowModelBase>;
    protected generateRows(): Array<MatrixDropdownRowModelBase>;
    protected createMatrixRow(name: any, text: string, value: any): MatrixDropdownRowModelBase;
    protected createNewValue(curValue: any): any;
    protected getRowValue(row: MatrixDropdownRowModelBase, questionValue: any, create?: boolean): any;
    protected onValueChanged(): void;
    hasErrors(fireCallback?: boolean): boolean;
    private hasErrorInColumns(fireCallback);
    createQuestion(row: MatrixDropdownRowModelBase, column: MatrixDropdownColumn): Question;
    protected createQuestionCore(row: MatrixDropdownRowModelBase, column: MatrixDropdownColumn): Question;
    protected getQuestionName(row: MatrixDropdownRowModelBase, column: MatrixDropdownColumn): string;
    protected getColumnChoices(column: MatrixDropdownColumn): Array<any>;
    protected getColumnOptionsCaption(column: MatrixDropdownColumn): string;
    protected createDropdown(name: string, column: MatrixDropdownColumn): QuestionDropdownModel;
    protected createCheckbox(name: string, column: MatrixDropdownColumn): QuestionCheckboxModel;
    protected createRadiogroup(name: string, column: MatrixDropdownColumn): QuestionRadiogroupModel;
    protected createText(name: string, column: MatrixDropdownColumn): QuestionTextModel;
    protected createComment(name: string, column: MatrixDropdownColumn): QuestionCommentModel;
    protected createCellQuestion(questionType: string, name: string): Question;
    protected deleteRowValue(newValue: any, row: MatrixDropdownRowModelBase): any;
    onRowChanged(row: MatrixDropdownRowModelBase, newRowValue: any): void;
}
}
declare module 'question_matrixdropdownbase' {
export * from 'question_matrixdropdownbase';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_matrixdropdown.d.ts
declare module 'question_matrixdropdown' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionMatrixDropdownModelBase, MatrixDropdownRowModelBase, IMatrixDropdownData } from 'question_matrixdropdownbase';
export class MatrixDropdownRowModel extends MatrixDropdownRowModelBase {
    name: any;
    text: string;
    constructor(name: any, text: string, data: IMatrixDropdownData, value: any);
    rowName: any;
}
export class QuestionMatrixDropdownModel extends QuestionMatrixDropdownModelBase implements IMatrixDropdownData {
    name: string;
    private rowsValue;
    constructor(name: string);
    getType(): string;
    rows: Array<any>;
    protected generateRows(): Array<MatrixDropdownRowModel>;
    protected createMatrixRow(name: any, text: string, value: any): MatrixDropdownRowModel;
}
}
declare module 'question_matrixdropdown' {
export * from 'question_matrixdropdown';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_matrixdynamic.d.ts
declare module 'question_matrixdynamic' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionMatrixDropdownModelBase, MatrixDropdownRowModelBase, IMatrixDropdownData } from 'question_matrixdropdownbase';
import { SurveyError } from 'base';
export class MatrixDynamicRowModel extends MatrixDropdownRowModelBase {
    index: number;
    constructor(index: number, data: IMatrixDropdownData, value: any);
    rowName: string;
}
export class QuestionMatrixDynamicModel extends QuestionMatrixDropdownModelBase implements IMatrixDropdownData {
    name: string;
    static MaxRowCount: number;
    private rowCounter;
    private rowCountValue;
    private addRowTextValue;
    private removeRowTextValue;
    minRowCount: number;
    rowCountChangedCallback: () => void;
    constructor(name: string);
    getType(): string;
    rowCount: number;
    addRow(): void;
    removeRow(index: number): void;
    addRowText: string;
    removeRowText: string;
    cachedVisibleRows: Array<MatrixDropdownRowModelBase>;
    protected onCheckForErrors(errors: Array<SurveyError>): void;
    private hasErrorInRows();
    protected generateRows(): Array<MatrixDynamicRowModel>;
    protected createMatrixRow(value: any): MatrixDynamicRowModel;
    protected createNewValue(curValue: any): any;
    protected deleteRowValue(newValue: any, row: MatrixDropdownRowModelBase): any;
    private getRowValueByIndex(questionValue, index);
    protected getRowValue(row: MatrixDropdownRowModelBase, questionValue: any, create?: boolean): any;
}
}
declare module 'question_matrixdynamic' {
export * from 'question_matrixdynamic';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_matrix.d.ts
declare module 'question_matrix' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base } from 'base';
import { Question } from 'question';
import { SurveyError } from 'base';
export interface IMatrixData {
    onMatrixRowChanged(row: MatrixRowModel): any;
}
export class MatrixRowModel extends Base {
    name: any;
    text: string;
    fullName: string;
    private data;
    protected rowValue: any;
    constructor(name: any, text: string, fullName: string, data: IMatrixData, value: any);
    value: any;
    protected onValueChanged(): void;
}
export class QuestionMatrixModel extends Question implements IMatrixData {
    name: string;
    private columnsValue;
    private rowsValue;
    private isRowChanging;
    private generatedVisibleRows;
    isAllRowRequired: boolean;
    constructor(name: string);
    getType(): string;
    hasRows: boolean;
    columns: Array<any>;
    rows: Array<any>;
    visibleRows: Array<MatrixRowModel>;
    protected onCheckForErrors(errors: Array<SurveyError>): void;
    private hasErrorInRows();
    protected createMatrixRow(name: any, text: string, fullName: string, value: any): MatrixRowModel;
    protected onValueChanged(): void;
    onMatrixRowChanged(row: MatrixRowModel): void;
}
}
declare module 'question_matrix' {
export * from 'question_matrix';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_multipletext.d.ts
declare module 'question_multipletext' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base } from 'base';
import { SurveyValidator, IValidatorOwner } from 'validator';
import { Question } from 'question';
import { SurveyError } from 'base';
export interface IMultipleTextData {
    getMultipleTextValue(name: string): any;
    setMultipleTextValue(name: string, value: any): any;
}
export class MultipleTextItemModel extends Base implements IValidatorOwner {
    name: any;
    private data;
    private titleValue;
    validators: Array<SurveyValidator>;
    constructor(name?: any, title?: string);
    getType(): string;
    setData(data: IMultipleTextData): void;
    title: string;
    value: any;
    onValueChanged(newValue: any): void;
    getValidatorTitle(): string;
}
export class QuestionMultipleTextModel extends Question implements IMultipleTextData {
    name: string;
    private colCountValue;
    colCountChangedCallback: () => void;
    itemSize: number;
    private itemsValues;
    constructor(name: string);
    getType(): string;
    items: Array<MultipleTextItemModel>;
    AddItem(name: string, title?: string): MultipleTextItemModel;
    colCount: number;
    getRows(): Array<any>;
    private isMultipleItemValueChanging;
    protected onValueChanged(): void;
    protected createTextItem(name: string, title: string): MultipleTextItemModel;
    protected onItemValueChanged(): void;
    protected runValidators(): SurveyError;
    getMultipleTextValue(name: string): any;
    setMultipleTextValue(name: string, value: any): void;
}
}
declare module 'question_multipletext' {
export * from 'question_multipletext';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/page.d.ts
declare module 'page' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, IPage, IConditionRunner, ISurvey, IQuestion, HashTable } from 'base';
import { QuestionBase } from 'questionbase';
export class QuestionRowModel {
    page: PageModel;
    question: QuestionBase;
    private visibleValue;
    visibilityChangedCallback: () => void;
    constructor(page: PageModel, question: QuestionBase);
    questions: Array<QuestionBase>;
    visible: boolean;
    updateVisible(): void;
    addQuestion(q: QuestionBase): void;
    protected onVisibleChanged(): void;
    setWidth(): void;
    private onRowVisibilityChanged();
    private getVisibleCount();
    private isQuestionVisible(q);
    private calcVisible();
}
export class PageModel extends Base implements IPage, IConditionRunner {
    name: string;
    private rowValues;
    private conditionRunner;
    questions: Array<QuestionBase>;
    data: ISurvey;
    visibleIf: string;
    title: string;
    visibleIndex: number;
    private numValue;
    private visibleValue;
    constructor(name?: string);
    rows: Array<QuestionRowModel>;
    isActive: boolean;
    isQuestionVisible(question: QuestionBase): boolean;
    protected createRow(question: QuestionBase): QuestionRowModel;
    private isDesignMode;
    private buildRows();
    onRowVisibilityChanged(row: QuestionRowModel): void;
    processedTitle: string;
    num: number;
    visible: boolean;
    getType(): string;
    isVisible: boolean;
    addQuestion(question: QuestionBase, index?: number): void;
    addNewQuestion(questionType: string, name: string): QuestionBase;
    removeQuestion(question: QuestionBase): void;
    scrollToFirstQuestion(): void;
    hasErrors(fireCallback?: boolean, focuseOnFirstError?: boolean): boolean;
    addQuestionsToList(list: Array<IQuestion>, visibleOnly?: boolean): void;
    runCondition(values: HashTable<any>): void;
    protected onNumChanged(value: number): void;
}
}
declare module 'page' {
export * from 'page';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question.d.ts
declare module 'question' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionBase } from 'questionbase';
import { SurveyError } from 'base';
import { SurveyValidator, IValidatorOwner } from 'validator';
export class Question extends QuestionBase implements IValidatorOwner {
    name: string;
    private titleValue;
    private questionValue;
    private questionComment;
    private isRequiredValue;
    private hasCommentValue;
    private hasOtherValue;
    private commentTextValue;
    private textPreProcessor;
    errors: Array<SurveyError>;
    validators: Array<SurveyValidator>;
    valueChangedCallback: () => void;
    commentChangedCallback: () => void;
    errorsChangedCallback: () => void;
    titleChangedCallback: () => void;
    constructor(name: string);
    hasTitle: boolean;
    title: string;
    processedTitle: string;
    fullTitle: string;
    protected canProcessedTextValues(name: string): boolean;
    protected getProcessedTextValue(name: string): any;
    supportComment(): boolean;
    supportOther(): boolean;
    isRequired: boolean;
    hasComment: boolean;
    commentText: string;
    hasOther: boolean;
    protected hasOtherChanged(): void;
    protected no: string;
    protected onSetData(): void;
    value: any;
    comment: string;
    protected getComment(): string;
    protected setComment(newValue: string): void;
    isEmpty(): boolean;
    hasErrors(fireCallback?: boolean): boolean;
    requiredText: string;
    private checkForErrors(fireCallback);
    protected onCheckForErrors(errors: Array<SurveyError>): void;
    protected hasRequiredError(): boolean;
    protected runValidators(): SurveyError;
    private isValueChangedInSurvey;
    protected setNewValue(newValue: any): void;
    protected setNewValueInData(newValue: any): void;
    private getValueCore();
    private setValueCore(newValue);
    protected valueFromData(val: any): any;
    protected valueToData(val: any): any;
    protected onValueChanged(): void;
    protected setNewComment(newValue: string): void;
    onSurveyValueChanged(newValue: any): void;
    getValidatorTitle(): string;
}
}
declare module 'question' {
export * from 'question';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/questionbase.d.ts
declare module 'questionbase' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, IQuestion, IConditionRunner, ISurveyData, ISurvey, HashTable } from 'base';
export class QuestionBase extends Base implements IQuestion, IConditionRunner {
    name: string;
    private static questionCounter;
    private static getQuestionId();
    protected data: ISurveyData;
    protected survey: ISurvey;
    private conditionRunner;
    visibleIf: string;
    private idValue;
    private visibleValue;
    startWithNewLine: boolean;
    private visibleIndexValue;
    width: string;
    private renderWidthValue;
    private rightIndentValue;
    indent: number;
    focusCallback: () => void;
    renderWidthChangedCallback: () => void;
    rowVisibilityChangedCallback: () => void;
    visibilityChangedCallback: () => void;
    visibleIndexChangedCallback: () => void;
    constructor(name: string);
    visible: boolean;
    visibleIndex: number;
    hasErrors(fireCallback?: boolean): boolean;
    hasTitle: boolean;
    hasComment: boolean;
    id: string;
    renderWidth: string;
    rightIndent: number;
    titleFlag:string;
    focus(): void;
    setData(newValue: ISurveyData): void;
    protected fireCallback(callback: () => void): void;
    protected onSetData(): void;
    protected onCreating(): void;
    runCondition(values: HashTable<any>): void;
    onSurveyValueChanged(newValue: any): void;
    onSurveyLoad(): void;
    setVisibleIndex(value: number): void;
    supportGoNextPageAutomatic(): boolean;
}
}
declare module 'questionbase' {
export * from 'questionbase';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_baseselect.d.ts
declare module 'question_baseselect' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Question } from 'question';
import { ItemValue, SurveyError } from 'base';
import { ChoicesRestfull } from 'choicesRestfull';
export class QuestionSelectBase extends Question {
    private commentValue;
    protected cachedValue: any;
    otherItem: ItemValue;
    private choicesFromUrl;
    private choicesValues;
    choicesByUrl: ChoicesRestfull;
    otherErrorText: string;
    storeOthersAsComment: boolean;
    choicesOrderValue: string;
    choicesChangedCallback: () => void;
    constructor(name: string);
    isOtherSelected: boolean;
    protected getHasOther(val: any): boolean;
    protected createRestfull(): ChoicesRestfull;
    protected getComment(): string;
    private isSettingComment;
    protected setComment(newValue: string): void;
    protected valueFromData(val: any): any;
    protected valueToData(val: any): any;
    protected valueFromDataCore(val: any): any;
    protected valueToDataCore(val: any): any;
    protected hasUnknownValue(val: any): boolean;
    choices: Array<any>;
    protected hasOtherChanged(): void;
    choicesOrder: string;
    otherText: string;
    visibleChoices: Array<ItemValue>;
    private activeChoices;
    supportComment(): boolean;
    supportOther(): boolean;
    protected onCheckForErrors(errors: Array<SurveyError>): void;
    protected getStoreOthersAsComment(): boolean;
    onSurveyLoad(): void;
    private onLoadChoicesFromUrl(array);
    private sortVisibleChoices(array);
    private sortArray(array, mult);
    private randomizeArray(array);
}
export class QuestionCheckboxBase extends QuestionSelectBase {
    name: string;
    private colCountValue;
    colCountChangedCallback: () => void;
    constructor(name: string);
    colCount: number;
}
}
declare module 'question_baseselect' {
export * from 'question_baseselect';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_checkbox.d.ts
declare module 'question_checkbox' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionCheckboxBase } from 'question_baseselect';
export class QuestionCheckboxModel extends QuestionCheckboxBase {
    name: string;
    constructor(name: string);
    protected getHasOther(val: any): boolean;
    protected valueFromDataCore(val: any): any;
    protected valueToDataCore(val: any): any;
    getType(): string;
}
}
declare module 'question_checkbox' {
export * from 'question_checkbox';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_comment.d.ts
declare module 'question_comment' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Question } from 'question';
export class QuestionCommentModel extends Question {
    name: string;
    rows: number;
    cols: number;
    constructor(name: string);
    getType(): string;
    isEmpty(): boolean;
}
}
declare module 'question_comment' {
export * from 'question_comment';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_dropdown.d.ts
declare module 'question_dropdown' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionSelectBase } from 'question_baseselect';
export class QuestionDropdownModel extends QuestionSelectBase {
    name: string;
    private optionsCaptionValue;
    constructor(name: string);
    optionsCaption: string;
    getType(): string;
    supportGoNextPageAutomatic(): boolean;
}
}
declare module 'question_dropdown' {
export * from 'question_dropdown';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/questionfactory.d.ts
declare module 'questionfactory' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionBase } from 'questionbase';
export class QuestionFactory {
    static Instance: QuestionFactory;
    static DefaultChoices: string[];
    private creatorHash;
    registerQuestion(questionType: string, questionCreator: (name: string) => QuestionBase): void;
    getAllTypes(): Array<string>;
    createQuestion(questionType: string, name: string): QuestionBase;
}
}
declare module 'questionfactory' {
export * from 'questionfactory';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_file.d.ts
declare module 'question_file' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Question } from 'question';
import { SurveyError } from 'base';
export class QuestionFileModel extends Question {
    name: string;
    private showPreviewValue;
    private isUploading;
    previewValueLoadedCallback: () => void;
    imageHeight: string;
    imageWidth: string;
    storeDataAsText: boolean;
    maxSize: number;
    constructor(name: string);
    getType(): string;
    showPreview: boolean;
    loadFile(file: File): void;
    previewValue: any;
    protected setFileValue(file: File): void;
    protected onCheckForErrors(errors: Array<SurveyError>): void;
    private checkFileForErrors(file);
    private isFileImage(file);
}
}
declare module 'question_file' {
export * from 'question_file';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_html.d.ts
declare module 'question_html' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionBase } from 'questionbase';
export class QuestionHtmlModel extends QuestionBase {
    name: string;
    private htmlValue;
    constructor(name: string);
    getType(): string;
    html: string;
    processedHtml: string;
}
}
declare module 'question_html' {
export * from 'question_html';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_radiogroup.d.ts
declare module 'question_radiogroup' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionCheckboxBase } from 'question_baseselect';
export class QuestionRadiogroupModel extends QuestionCheckboxBase {
    name: string;
    constructor(name: string);
    getType(): string;
    supportGoNextPageAutomatic(): boolean;
}
}
declare module 'question_radiogroup' {
export * from 'question_radiogroup';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_rating.d.ts
declare module 'question_rating' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { ItemValue } from 'base';
import { Question } from 'question';
export class QuestionRatingModel extends Question {
    name: string;
    static defaultRateValues: ItemValue[];
    private rates;
    mininumRateDescription: string;
    maximumRateDescription: string;
    rateValuesChangedCallback: () => void;
    constructor(name: string);
    rateValues: Array<any>;
    visibleRateValues: ItemValue[];
    getType(): string;
    supportComment(): boolean;
    supportOther(): boolean;
    supportGoNextPageAutomatic(): boolean;
}
}
declare module 'question_rating' {
export * from 'question_rating';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/question_text.d.ts
declare module 'question_text' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Question } from 'question';
export class QuestionTextModel extends Question {
    name: string;
    size: number;
    constructor(name: string);
    getType(): string;
    isEmpty(): boolean;
    supportGoNextPageAutomatic(): boolean;
}
}
declare module 'question_text' {
export * from 'question_text';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/survey.d.ts
declare module 'survey' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, ISurvey, IQuestion, IPage, SurveyError, Event } from 'base';
import { ISurveyTriggerOwner, SurveyTrigger } from 'trigger';
import { PageModel } from 'page';
import { JsonError } from 'jsonobject';
export class SurveyModel extends Base implements ISurvey, ISurveyTriggerOwner {
    surveyId: string;
    surveyPostId: string;
    clientId: string;
    cookieName: string;
    sendResultOnPageNext: boolean;
    commentPrefix: string;
    title: string;
    showNavigationButtons: boolean;
    showTitle: boolean;
    showPageTitles: boolean;
    completedHtml: string;
    requiredText: string;
    questionStartIndex: string;
    questionTitleTemplate: string;
    showProgressBar: string;
    storeOthersAsComment: boolean;
    goNextPageAutomatic: boolean;
    pages: Array<PageModel>;
    triggers: Array<SurveyTrigger>;
    clearInvisibleValues: boolean;
    private currentPageValue;
    private valuesHash;
    private variablesHash;
    private pagePrevTextValue;
    private pageNextTextValue;
    private completeTextValue;
    private showPageNumbersValue;
    private showQuestionNumbersValue;
    private questionTitleLocationValue;
    private localeValue;
    private isCompleted;
    private isLoading;
    private processedTextValues;
    private textPreProcessor;
    onComplete: Event<(sender: SurveyModel) => any, any>;
    onCurrentPageChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onValueChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onVisibleChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onPageVisibleChanged: Event<(sender: SurveyModel, options: any) => any, any>;
    onQuestionAdded: Event<(sender: SurveyModel, options: any) => any, any>;
    onQuestionRemoved: Event<(sender: SurveyModel, options: any) => any, any>;
    onValidateQuestion: Event<(sender: SurveyModel, options: any) => any, any>;
    onProcessHtml: Event<(sender: SurveyModel, options: any) => any, any>;
    onSendResult: Event<(sender: SurveyModel, options: any) => any, any>;
    onGetResult: Event<(sender: SurveyModel, options: any) => any, any>;
    onUploadFile: Event<(sender: SurveyModel, options: any) => any, any>;
    jsonErrors: Array<JsonError>;
    mode: string;
    constructor(jsonObj?: any);
    getType(): string;
    locale: string;
    getLocString(str: string): any;
    emptySurveyText: string;
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    showPageNumbers: boolean;
    showQuestionNumbers: string;
    questionTitleLocation: string;
    data: any;
    comments: any;
    visiblePages: Array<PageModel>;
    isEmpty: boolean;
    PageCount: number;
    visiblePageCount: number;
    currentPage: PageModel;
    state: string;
    clear(): void;
    protected mergeValues(src: any, dest: any): void;
    protected currentPageChanged(newValue: PageModel, oldValue: PageModel): void;
    getProgress(): number;
    isDesignMode: boolean;
    hasCookie: boolean;
    setCookie(): void;
    deleteCookie(): void;
    nextPage(): boolean;
    isCurrentPageHasErrors: boolean;
    prevPage(): boolean;
    completeLastPage(): boolean;
    isFirstPage: boolean;
    isLastPage: boolean;
    doComplete(): void;
    protected setCompleted(): void;
    processedCompletedHtml: string;
    processedLoadingHtml: string;
    progressText: string;
    uploadFile(name: string, file: File, storeDataAsText: boolean, uploadingCallback: (status: string) => any): boolean;
    protected uploadFileCore(name: string, file: File, uploadingCallback: (status: string) => any): void;
    getPage(index: number): PageModel;
    addPage(page: PageModel): void;
    addNewPage(name: string): PageModel;
    removePage(page: PageModel): void;
    getQuestionByName(name: string, caseInsensitive?: boolean): IQuestion;
    getQuestionsByNames(names: string[], caseInsensitive?: boolean): IQuestion[];
    getPageByQuestion(question: IQuestion): PageModel;
    getPageByName(name: string): PageModel;
    getPagesByNames(names: string[]): PageModel[];
    getAllQuestions(visibleOnly?: boolean): Array<IQuestion>;
    protected createNewPage(name: string): PageModel;
    private notifyQuestionOnValueChanged(name, newValue);
    private notifyAllQuestionsOnValueChanged();
    protected doSurveyValueChanged(question: IQuestion, newValue: any): void;
    private checkOnPageTriggers();
    private getCurrentPageQuestions();
    private checkTriggers(name, newValue, isOnNextPage);
    private doQuestionsOnLoad();
    private runConditions();
    private runConditionsForList(list);
    sendResult(postId?: string, clientId?: string, isPartialCompleted?: boolean): void;
    getResult(resultId: string, name: string): void;
    loadSurveyFromService(surveyId?: string): void;
    protected onLoadingSurveyFromService(): void;
    protected onLoadSurveyFromService(): void;
    private updateVisibleIndexes();
    private updatePageVisibleIndexes(showIndex);
    private updateQuestionVisibleIndexes(questions, showIndex);
    private setJsonObject(jsonObj);
    protected onBeforeCreating(): void;
    protected onCreating(): void;
    private updateProcessedTextValues();
    private addQuestionToProcessedTextValues(question);
    private getProcessedTextValue(name);
    private clearInvisibleQuestionValues();
    getVariable(name: string): any;
    setVariable(name: string, newValue: any): void;
    private getUnbindValue(value);
    getValue(name: string): any;
    setValue(name: string, newValue: any): void;
    private isValueEqual(name, newValue);
    private isTwoValueEquals(x, y);
    private tryGoNextPageAutomatic(name);
    getComment(name: string): string;
    setComment(name: string, newValue: string): void;
    questionVisibilityChanged(question: IQuestion, newValue: boolean): void;
    pageVisibilityChanged(page: IPage, newValue: boolean): void;
    questionAdded(question: IQuestion, index: number): void;
    questionRemoved(question: IQuestion): void;
    validateQuestion(name: string): SurveyError;
    processHtml(html: string): string;
    processText(text: string): string;
    getObjects(pages: string[], questions: string[]): any[];
    setTriggerValue(name: string, value: any, isVariable: boolean): void;
}
}
declare module 'survey' {
export * from 'survey';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/trigger.d.ts
declare module 'trigger' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base, HashTable } from 'base';
export class Trigger extends Base {
    static operatorsValue: HashTable<Function>;
    static operators: HashTable<Function>;
    private opValue;
    value: any;
    constructor();
    operator: string;
    check(value: any): void;
    protected onSuccess(): void;
    protected onFailure(): void;
}
export interface ISurveyTriggerOwner {
    getObjects(pages: string[], questions: string[]): any[];
    doComplete(): any;
    setTriggerValue(name: string, value: any, isVariable: boolean): any;
}
export class SurveyTrigger extends Trigger {
    name: string;
    protected owner: ISurveyTriggerOwner;
    constructor();
    setOwner(owner: ISurveyTriggerOwner): void;
    isOnNextPage: boolean;
}
export class SurveyTriggerVisible extends SurveyTrigger {
    pages: string[];
    questions: string[];
    constructor();
    getType(): string;
    protected onSuccess(): void;
    protected onFailure(): void;
    private onTrigger(func);
    protected onItemSuccess(item: any): void;
    protected onItemFailure(item: any): void;
}
export class SurveyTriggerComplete extends SurveyTrigger {
    constructor();
    getType(): string;
    isOnNextPage: boolean;
    protected onSuccess(): void;
}
export class SurveyTriggerSetValue extends SurveyTrigger {
    setToName: string;
    setValue: any;
    isVariable: boolean;
    constructor();
    getType(): string;
    protected onSuccess(): void;
}
}
declare module 'trigger' {
export * from 'trigger';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/surveyWindow.d.ts
declare module 'surveyWindow' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { Base } from 'base';
import { SurveyModel } from 'survey';
export class SurveyWindowModel extends Base {
    static surveyElementName: string;
    surveyValue: SurveyModel;
    windowElement: HTMLDivElement;
    isShowingValue: boolean;
    isExpandedValue: boolean;
    titleValue: string;
    templateValue: string;
    constructor(jsonObj: any);
    getType(): string;
    survey: SurveyModel;
    isShowing: boolean;
    isExpanded: boolean;
    title: string;
    expand(): void;
    collapse(): void;
    protected createSurvey(jsonObj: any): SurveyModel;
    protected expandcollapse(value: boolean): void;
}
}
declare module 'surveyWindow' {
export * from 'surveyWindow';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/textPreProcessor.d.ts
declare module 'textPreProcessor' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export class TextPreProcessorItem {
    start: number;
    end: number;
}
export class TextPreProcessor {
    onProcess: (name: string) => any;
    onHasValue: (name: string) => boolean;
    constructor();
    process(text: string): string;
    private getItems(text);
    private getName(name);
    private canProcessName(name);
}
}
declare module 'textPreProcessor' {
export * from 'textPreProcessor';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/dxSurveyService.d.ts
declare module 'dxSurveyService' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export class dxSurveyService {
    static serviceUrl: string;
    constructor();
    loadSurvey(surveyId: string, onLoad: (success: boolean, result: string, response: any) => void): void;
    sendResult(postId: string, result: JSON, onSendResult: (success: boolean, response: any) => void, clientId?: string, isPartialCompleted?: boolean): void;
    sendFile(postId: string, file: File, onSendFile: (success: boolean, response: any) => void): void;
    getResult(resultId: string, name: string, onGetResult: (success: boolean, data: any, dataList: Array<any>, response: any) => void): void;
    isCompleted(resultId: string, clientId: string, onIsCompleted: (success: boolean, result: string, response: any) => void): void;
}
}
declare module 'dxSurveyService' {
export * from 'dxSurveyService';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/surveyStrings.d.ts
declare module 'surveyStrings' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var surveyLocalization: {
    currentLocale: string;
    locales: {};
    getString: (strName: string) => any;
    getLocales: () => string[];
};
export var surveyStrings: {
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    otherItemText: string;
    progressText: string;
    emptySurvey: string;
    completingSurvey: string;
    loadingSurvey: string;
    optionsCaption: string;
    requiredError: string;
    requiredInAllRowsError: string;
    numericError: string;
    textMinLength: string;
    minRowCountError: string;
    minSelectError: string;
    maxSelectError: string;
    numericMinMax: string;
    numericMin: string;
    numericMax: string;
    invalidEmail: string;
    urlRequestError: string;
    urlGetChoicesError: string;
    exceedMaxSize: string;
    otherRequiredError: string;
    uploadingFile: string;
    addRow: string;
    removeRow: string;
};
}
declare module 'surveyStrings' {
export * from 'surveyStrings';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/entries/chunks/model.d.ts
declare module '~survey-knockout/chunks/model' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export { AnswerCountValidator, EmailValidator, NumericValidator, RegexValidator, SurveyValidator, TextValidator, ValidatorResult, ValidatorRunner } from 'validator';
export { Base, Event, ItemValue, SurveyError, ISurvey } from 'base';
export { ChoicesRestfull } from 'choicesRestfull';
export { Condition, ConditionNode, ConditionRunner } from 'conditions';
export { ConditionsParser } from 'conditionsParser';
export { CustomError, ExceedSizeError, RequreNumericError } from 'error';
export { JsonError, JsonIncorrectTypeError, JsonMetadata, JsonMetadataClass, JsonMissingTypeError, JsonMissingTypeErrorBase, JsonObject, JsonObjectProperty, JsonRequiredPropertyError, JsonUnknownPropertyError } from 'jsonobject';
export { MatrixDropdownCell, MatrixDropdownColumn, MatrixDropdownRowModelBase, QuestionMatrixDropdownModelBase } from 'question_matrixdropdownbase';
export { MatrixDropdownRowModel, QuestionMatrixDropdownModel } from 'question_matrixdropdown';
export { MatrixDynamicRowModel, QuestionMatrixDynamicModel } from 'question_matrixdynamic';
export { MatrixRowModel, QuestionMatrixModel } from 'question_matrix';
export { MultipleTextItemModel, QuestionMultipleTextModel } from 'question_multipletext';
export { PageModel, QuestionRowModel } from 'page';
export { Question } from 'question';
export { QuestionBase } from 'questionbase';
export { QuestionCheckboxBase, QuestionSelectBase } from 'question_baseselect';
export { QuestionCheckboxModel } from 'question_checkbox';
export { QuestionCommentModel } from 'question_comment';
export { QuestionDropdownModel } from 'question_dropdown';
export { QuestionFactory } from 'questionfactory';
export { QuestionFileModel } from 'question_file';
export { QuestionHtmlModel } from 'question_html';
export { QuestionRadiogroupModel } from 'question_radiogroup';
export { QuestionRatingModel } from 'question_rating';
export { QuestionTextModel } from 'question_text';
export { SurveyModel } from 'survey';
export { SurveyTrigger, SurveyTriggerComplete, SurveyTriggerSetValue, SurveyTriggerVisible, Trigger } from 'trigger';
export { SurveyWindowModel } from 'surveyWindow';
export { TextPreProcessor } from 'textPreProcessor';
export { dxSurveyService } from 'dxSurveyService';
export { surveyLocalization, surveyStrings } from 'surveyStrings';
}
declare module 'survey-knockout/chunks/model' {
export * from '~survey-knockout/chunks/model';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/localization/russian.d.ts
declare module 'localization/russian' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var russianSurveyStrings: {
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    progressText: string;
    emptySurvey: string;
    completingSurvey: string;
    loadingSurvey: string;
    otherItemText: string;
    optionsCaption: string;
    requiredError: string;
    numericError: string;
    textMinLength: string;
    minSelectError: string;
    maxSelectError: string;
    numericMinMax: string;
    numericMin: string;
    numericMax: string;
    invalidEmail: string;
    otherRequiredError: string;
};
}
declare module 'localization/russian' {
export * from 'localization/russian';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/localization/french.d.ts
declare module 'localization/french' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var frenchSurveyStrings: {
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    otherItemText: string;
    progressText: string;
    emptySurvey: string;
    completingSurvey: string;
    loadingSurvey: string;
    optionsCaption: string;
    requiredError: string;
    numericError: string;
    textMinLength: string;
    minSelectError: string;
    maxSelectError: string;
    numericMinMax: string;
    numericMin: string;
    numericMax: string;
    invalidEmail: string;
    exceedMaxSize: string;
    otherRequiredError: string;
};
}
declare module 'localization/french' {
export * from 'localization/french';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/localization/finnish.d.ts
declare module 'localization/finnish' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var finnishSurveyStrings: {
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    otherItemText: string;
    progressText: string;
    emptySurvey: string;
    completingSurvey: string;
    loadingSurvey: string;
    optionsCaption: string;
    requiredError: string;
    numericError: string;
    textMinLength: string;
    minSelectError: string;
    maxSelectError: string;
    numericMinMax: string;
    numericMin: string;
    numericMax: string;
    invalidEmail: string;
    otherRequiredError: string;
};
}
declare module 'localization/finnish' {
export * from 'localization/finnish';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/localization/german.d.ts
declare module 'localization/german' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var germanSurveyStrings: {
    pagePrevText: string;
    pageNextText: string;
    completeText: string;
    progressText: string;
    emptySurvey: string;
    completingSurvey: string;
    loadingSurvey: string;
    otherItemText: string;
    optionsCaption: string;
    requiredError: string;
    numericError: string;
    textMinLength: string;
    minSelectError: string;
    maxSelectError: string;
    numericMinMax: string;
    numericMin: string;
    numericMax: string;
    invalidEmail: string;
    exceedMaxSize: string;
    otherRequiredError: string;
};
}
declare module 'localization/german' {
export * from 'localization/german';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/entries/chunks/localization.d.ts
declare module '~survey-knockout/chunks/localization' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import 'localization/russian';
import 'localization/french';
import 'localization/finnish';
import 'localization/german';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/defaultCss/cssstandard.d.ts
declare module 'defaultCss/cssstandard' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var surveyCss: {
    currentType: string;
    getCss: () => any;
};
export var defaultStandardCss: {
    root: string;
    header: string;
    body: string;
    footer: string;
    navigationButton: string;
    navigation: {
        complete: string;
        prev: string;
        next: string;
    };
    progress: string;
    progressBar: string;
    pageTitle: string;
    row: string;
    question: {
        root: string;
        title: string;
        comment: string;
        indent: number;
    };
    error: {
        root: string;
        icon: string;
        item: string;
    };
    checkbox: {
        root: string;
        item: string;
        other: string;
    };
    comment: string;
    dropdown: string;
    matrix: {
        root: string;
    };
    matrixdropdown: {
        root: string;
    };
    matrixdynamic: {
        root: string;
        button: string;
    };
    multipletext: {
        root: string;
        itemTitle: string;
        itemValue: string;
    };
    radiogroup: {
        root: string;
        item: string;
        other: string;
    };
    rating: {
        root: string;
        item: string;
    };
    text: string;
    window: {
        root: string;
        body: string;
        header: {
            root: string;
            title: string;
            button: string;
            buttonExpanded: string;
            buttonCollapsed: string;
        };
    };
};
}
declare module 'defaultCss/cssstandard' {
export * from 'defaultCss/cssstandard';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/defaultCss/cssbootstrap.d.ts
declare module 'defaultCss/cssbootstrap' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export var defaultBootstrapCss: {
    root: string;
    header: string;
    body: string;
    footer: string;
    navigationButton: string;
    navigation: {
        complete: string;
        prev: string;
        next: string;
    };
    progress: string;
    progressBar: string;
    pageTitle: string;
    row: string;
    question: {
        root: string;
        title: string;
        comment: string;
        indent: number;
    };
    error: {
        root: string;
        icon: string;
        item: string;
    };
    checkbox: {
        root: string;
        item: string;
        other: string;
    };
    comment: string;
    dropdown: string;
    matrix: {
        root: string;
    };
    matrixdropdown: {
        root: string;
    };
    matrixdynamic: {
        root: string;
        button: string;
    };
    multipletext: {
        root: string;
        itemTitle: string;
        itemValue: string;
    };
    radiogroup: {
        root: string;
        item: string;
        other: string;
    };
    rating: {
        root: string;
        item: string;
    };
    text: string;
    window: {
        root: string;
        body: string;
        header: {
            root: string;
            title: string;
            button: string;
            buttonExpanded: string;
            buttonCollapsed: string;
        };
    };
};
}
declare module 'defaultCss/cssbootstrap' {
export * from 'defaultCss/cssbootstrap';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/entries/chunks/cssFrameworks.d.ts
declare module '~survey-knockout/chunks/cssFrameworks' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import 'defaultCss/cssbootstrap';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/kosurvey.d.ts
declare module 'knockout/kosurvey' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { SurveyModel } from 'survey';
import { Event } from 'base';
import { Page } from 'knockout/kopage';
import { PageModel } from 'page';
export class Survey extends SurveyModel {
    static cssType: string;
    private renderedElement;
    onRendered: Event<(sender: SurveyModel) => any, any>;
    koCurrentPage: any;
    koIsFirstPage: any;
    koIsLastPage: any;
    dummyObservable: any;
    koState: any;
    koProgress: any;
    koProgressText: any;
    constructor(jsonObj?: any, renderedElement?: any, css?: any);
    cssNavigationComplete: string;
    cssNavigationPrev: string;
    cssNavigationNext: string;
    private getNavigationCss(main, btn);
    css: any;
    render(element?: any): void;
    loadSurveyFromService(surveyId?: string, renderedElement?: any): void;
    protected setCompleted(): void;
    protected createNewPage(name: string): Page;
    protected getTemplate(): string;
    protected onBeforeCreating(): void;
    protected currentPageChanged(newValue: PageModel, oldValue: PageModel): void;
    protected onLoadSurveyFromService(): void;
    protected onLoadingSurveyFromService(): void;
    private applyBinding();
    private updateKoCurrentPage();
}
}
declare module 'knockout/kosurvey' {
export * from 'knockout/kosurvey';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/kopage.d.ts
declare module 'knockout/kopage' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { PageModel, QuestionRowModel } from 'page';
import { QuestionBase } from 'questionbase';
export class QuestionRow extends QuestionRowModel {
    page: PageModel;
    question: QuestionBase;
    koVisible: any;
    constructor(page: PageModel, question: QuestionBase);
    protected onVisibleChanged(): void;
    koAfterRender(el: any, con: any): void;
}
export class Page extends PageModel {
    koNo: any;
    constructor(name?: string);
    protected createRow(question: QuestionBase): QuestionRowModel;
    protected onCreating(): void;
    protected onNumChanged(value: number): void;
}
}
declare module 'knockout/kopage' {
export * from 'knockout/kopage';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestionbase.d.ts
declare module 'knockout/koquestionbase' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionBase } from 'questionbase';
export class QuestionImplementorBase {
    question: QuestionBase;
    koVisible: any;
    koErrors: any;
    koMarginLeft: any;
    koPaddingRight: any;
    koRenderWidth: any;
    constructor(question: QuestionBase);
    protected onVisibilityChanged(): void;
    protected onRenderWidthChanged(): void;
    private getIndentSize(indent);
}
}
declare module 'knockout/koquestionbase' {
export * from 'knockout/koquestionbase';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion.d.ts
declare module 'knockout/koquestion' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionImplementorBase } from 'knockout/koquestionbase';
import { Question } from 'question';
export class QuestionImplementor extends QuestionImplementorBase {
    question: Question;
    private isUpdating;
    private koDummy;
    koValue: any;
    koComment: any;
    koTitle: any;
    constructor(question: Question);
    protected onValueChanged(): void;
    protected onCommentChanged(): void;
    protected onVisibilityChanged(): void;
    protected onVisibleIndexChanged(): void;
    protected onErrorsChanged(): void;
    protected createkoValue(): any;
    protected setkoValue(newValue: any): void;
    protected updateValue(newValue: any): void;
    protected updateComment(newValue: any): void;
    protected getNo(): string;
}
}
declare module 'knockout/koquestion' {
export * from 'knockout/koquestion';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_baseselect.d.ts
declare module 'knockout/koquestion_baseselect' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionImplementor } from 'knockout/koquestion';
import { Question } from 'question';
export class QuestionSelectBaseImplementor extends QuestionImplementor {
    koOtherVisible: any;
    koVisibleChoices: any;
    constructor(question: Question);
    protected isOtherSelected: boolean;
}
export class QuestionCheckboxBaseImplementor extends QuestionSelectBaseImplementor {
    koWidth: any;
    constructor(question: Question);
    protected onColCountChanged(): void;
    protected colWidth: string;
    private koAfterRender(el, con);
}
}
declare module 'knockout/koquestion_baseselect' {
export * from 'knockout/koquestion_baseselect';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_checkbox.d.ts
declare module 'knockout/koquestion_checkbox' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionCheckboxModel } from 'question_checkbox';
export class QuestionCheckbox extends QuestionCheckboxModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_checkbox' {
export * from 'knockout/koquestion_checkbox';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_comment.d.ts
declare module 'knockout/koquestion_comment' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionCommentModel } from 'question_comment';
export class QuestionComment extends QuestionCommentModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_comment' {
export * from 'knockout/koquestion_comment';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_dropdown.d.ts
declare module 'knockout/koquestion_dropdown' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionDropdownModel } from 'question_dropdown';
export class QuestionDropdown extends QuestionDropdownModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_dropdown' {
export * from 'knockout/koquestion_dropdown';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_file.d.ts
declare module 'knockout/koquestion_file' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionFileModel } from 'question_file';
import { QuestionImplementor } from 'knockout/koquestion';
import { Question } from 'question';
export class QuestionFileImplementor extends QuestionImplementor {
    koDataUpdater: any;
    koData: any;
    koHasValue: any;
    constructor(question: Question);
    private onChange(src);
    private onLoadPreview();
}
export class QuestionFile extends QuestionFileModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_file' {
export * from 'knockout/koquestion_file';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_html.d.ts
declare module 'knockout/koquestion_html' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionHtmlModel } from 'question_html';
export class QuestionHtml extends QuestionHtmlModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_html' {
export * from 'knockout/koquestion_html';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_matrix.d.ts
declare module 'knockout/koquestion_matrix' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionMatrixModel, MatrixRowModel, IMatrixData } from 'question_matrix';
export class MatrixRow extends MatrixRowModel {
    name: any;
    text: string;
    fullName: string;
    private isValueUpdating;
    koValue: any;
    constructor(name: any, text: string, fullName: string, data: IMatrixData, value: any);
    protected onValueChanged(): void;
}
export class QuestionMatrix extends QuestionMatrixModel {
    name: string;
    constructor(name: string);
    protected createMatrixRow(name: any, text: string, fullName: string, value: any): MatrixRowModel;
}
}
declare module 'knockout/koquestion_matrix' {
export * from 'knockout/koquestion_matrix';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_matrixdropdown.d.ts
declare module 'knockout/koquestion_matrixdropdown' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionMatrixDropdownModel } from 'question_matrixdropdown';
export class QuestionMatrixDropdown extends QuestionMatrixDropdownModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_matrixdropdown' {
export * from 'knockout/koquestion_matrixdropdown';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_matrixdynamic.d.ts
declare module 'knockout/koquestion_matrixdynamic' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionImplementor } from 'knockout/koquestion';
import { QuestionMatrixDynamicModel } from 'question_matrixdynamic';
import { Question } from 'question';
import { MatrixDynamicRowModel } from 'question_matrixdynamic';
export class QuestionMatrixDynamicImplementor extends QuestionImplementor {
    koRows: any;
    koRecalc: any;
    koAddRowClick: any;
    koRemoveRowClick: any;
    koOverflowX: any;
    constructor(question: Question);
    protected onUpdateCells(): void;
    protected onColumnChanged(): void;
    protected onRowCountChanged(): void;
    protected addRow(): void;
    protected removeRow(row: MatrixDynamicRowModel): void;
}
export class QuestionMatrixDynamic extends QuestionMatrixDynamicModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_matrixdynamic' {
export * from 'knockout/koquestion_matrixdynamic';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_multipletext.d.ts
declare module 'knockout/koquestion_multipletext' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionMultipleTextModel, MultipleTextItemModel } from 'question_multipletext';
import { QuestionImplementor } from 'knockout/koquestion';
import { Question } from 'question';
export class MultipleTextItem extends MultipleTextItemModel {
    name: any;
    private isKOValueUpdating;
    koValue: any;
    constructor(name?: any, title?: string);
    onValueChanged(newValue: any): void;
}
export class QuestionMultipleTextImplementor extends QuestionImplementor {
    koRows: any;
    constructor(question: Question);
    protected onColCountChanged(): void;
}
export class QuestionMultipleText extends QuestionMultipleTextModel {
    name: string;
    constructor(name: string);
    protected createTextItem(name: string, title: string): MultipleTextItemModel;
}
}
declare module 'knockout/koquestion_multipletext' {
export * from 'knockout/koquestion_multipletext';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_radiogroup.d.ts
declare module 'knockout/koquestion_radiogroup' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionRadiogroupModel } from 'question_radiogroup';
export class QuestionRadiogroup extends QuestionRadiogroupModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_radiogroup' {
export * from 'knockout/koquestion_radiogroup';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_rating.d.ts
declare module 'knockout/koquestion_rating' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionRatingModel } from 'question_rating';
export class QuestionRating extends QuestionRatingModel {
    name: string;
    itemCss: string;
    constructor(name: string);
    protected onSetData(): void;
}
}
declare module 'knockout/koquestion_rating' {
export * from 'knockout/koquestion_rating';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koquestion_text.d.ts
declare module 'knockout/koquestion_text' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { QuestionTextModel } from 'question_text';
export class QuestionText extends QuestionTextModel {
    name: string;
    constructor(name: string);
}
}
declare module 'knockout/koquestion_text' {
export * from 'knockout/koquestion_text';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/koSurveyWindow.d.ts
declare module 'knockout/koSurveyWindow' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

import { SurveyWindowModel } from 'surveyWindow';
import { SurveyModel } from 'survey';
export class SurveyWindow extends SurveyWindowModel {
    koExpanded: any;
    koExpandedCss: any;
    doExpand: any;
    constructor(jsonObj: any);
    protected createSurvey(jsonObj: any): SurveyModel;
    protected expandcollapse(value: boolean): void;
    protected template: string;
    show(): void;
    protected getDefaultTemplate(): string;
    hide(): void;
    css: any;
    private changeExpanded();
    private onComplete();
    private getButtonCss();
}
}
declare module 'knockout/koSurveyWindow' {
export * from 'knockout/koSurveyWindow';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/knockout/templateText.d.ts
declare module 'knockout/templateText' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export class SurveyTemplateText {
    constructor();
    replaceText(replaceText: string, id: string, questionType?: string): void;
    protected getId(id: string, questionType: string): string;
    protected text: string;
}
}
declare module 'knockout/templateText' {
export * from 'knockout/templateText';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/extends.d.ts
declare module 'extends' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export function __extends(d: any, b: any): void;
}
declare module 'extends' {
export * from 'extends';
}

// Generated by typings
// Source: https://raw.githubusercontent.com/andrewtelnov/surveyjs/master/lib_typings/entries/ko.d.ts
declare module '~survey-knockout/ko' {
// Type definitions for Survey JavaScript library v0.9.12
// Project: http://surveyjs.org/
// Definitions by: Andrew Telnov <https://github.com/andrewtelnov/>

export * from '~survey-knockout/chunks/model';
import '~survey-knockout/chunks/localization';
export { defaultStandardCss } from 'defaultCss/cssstandard';
import '~survey-knockout/chunks/cssFrameworks';
export { Survey } from 'knockout/kosurvey';
export { QuestionRow, Page } from 'knockout/kopage';
export { QuestionImplementorBase } from 'knockout/koquestionbase';
export { QuestionImplementor } from 'knockout/koquestion';
export { QuestionSelectBaseImplementor } from 'knockout/koquestion_baseselect';
export { QuestionCheckboxBaseImplementor } from 'knockout/koquestion_baseselect';
export { QuestionCheckbox } from 'knockout/koquestion_checkbox';
export { QuestionComment } from 'knockout/koquestion_comment';
export { QuestionDropdown } from 'knockout/koquestion_dropdown';
export { QuestionFile } from 'knockout/koquestion_file';
export { QuestionHtml } from 'knockout/koquestion_html';
export { MatrixRow, QuestionMatrix } from 'knockout/koquestion_matrix';
export { QuestionMatrixDropdown } from 'knockout/koquestion_matrixdropdown';
export { QuestionMatrixDynamicImplementor, QuestionMatrixDynamic } from 'knockout/koquestion_matrixdynamic';
export { MultipleTextItem, QuestionMultipleTextImplementor, QuestionMultipleText } from 'knockout/koquestion_multipletext';
export { QuestionRadiogroup } from 'knockout/koquestion_radiogroup';
export { QuestionRating } from 'knockout/koquestion_rating';
export { QuestionText } from 'knockout/koquestion_text';
export { SurveyWindow } from 'knockout/koSurveyWindow';
export { SurveyTemplateText } from 'knockout/templateText';
export { __extends } from 'extends';
}
declare module 'survey-knockout/ko' {
export * from '~survey-knockout/ko';
}
declare module 'survey-knockout' {
export * from '~survey-knockout/ko';
}
